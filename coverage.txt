    1|       |//
    2|       |//  main.cpp
    3|       |//  assignment3
    4|       |//
    5|       |//  Created by Jason Tran on 2019-01-15.
    6|       |//  Copyright Â© 2019 Jason Tran. All rights reserved.
    7|       |//
    8|       |
    9|       |#include <iostream>
   10|       |#include <string>
   11|       |#include <vector>
   12|       |#include <cmath>
   13|       |#include <assert.h>
   14|       |#include <stdexcept>
   15|       |using namespace std;
   16|       |
   17|       |
   18|       |/*
   19|       | Splits a line into a vector of strings delimited by spaces
   20|       | */
   21|  1.50k|vector<string> splitLine(string inputStr) {
   22|  1.50k|    vector<string> output;
   23|  1.50k|    string temp = "";
   24|  26.0k|    for (int i = 0; i < inputStr.size(); i++) {
   25|  24.5k|        if (inputStr[i] == ' ') {
   26|  7.47k|            if (temp != "") {
   27|  7.47k|                output.push_back(temp);
   28|  7.47k|                temp = "";
   29|  7.47k|            }
   30|  17.0k|        } else {
   31|  17.0k|            temp += inputStr[i];
   32|  17.0k|        }
   33|  24.5k|        
   34|  24.5k|        if (i == inputStr.size() - 1) {
   35|  1.50k|            if (temp != "") {
   36|  1.50k|                output.push_back(temp);
   37|  1.50k|            }
   38|  1.50k|        }
   39|  24.5k|    }
   40|  1.50k|    return output;
   41|  1.50k|}
   42|       |
   43|       |struct Point {
   44|       |    double x, y;
   45|       |    double angle;
   46|       |};
   47|       |
   48|       |struct Distances {
   49|       |    double d12, d23, d34, d41; // adjacent
   50|       |    double d13, d24; //diagonal
   51|       |};
   52|       |
   53|       |
   54|       |////////////////////////////////////////////////////////////////////////////////////////////////////////////
   55|       |
   56|  19.9k|double distance(Point pt1, Point pt2) {
   57|  19.9k|    double d = sqrt(pow(pt2.x - pt1.x, 2) + pow(pt2.y - pt1.y, 2));
   58|  19.9k|    return d;
   59|  19.9k|}
   60|       |
   61|  20.1k|bool isEqual(float a, float b) {
   62|  20.1k|    if (a == INFINITY && b == INFINITY) {
   63|      0|        return true;
   64|      0|    }
   65|  20.1k|    
   66|  20.1k|    if (a == -INFINITY && b == -INFINITY) {
   67|      0|        return true;
   68|      0|    }
   69|  20.1k|    
   70|  20.1k|    return (fabs(a - b) < 0.0001);
   71|  20.1k|}
   72|       |
   73|  3.12k|bool isParallel(double s1, double s2) {
   74|  3.12k|    //    if (fabs(s1) == INFINITY && fabs(s2) == INFINITY) {
   75|  3.12k|    //        return true;
   76|  3.12k|    //    }
   77|  3.12k|    
   78|  3.12k|    if (isEqual(s1, s2)) {
   79|     31|        return true;
   80|     31|    }
   81|  3.09k|    
   82|  3.09k|    return false;
   83|  3.09k|    
   84|  3.09k|    
   85|  3.09k|}
   86|       |
   87|     30|bool allAngles90(Point p1, Point p2, Point p3, Point p4) {
   88|     30|    vector<double> angles = {p1.angle, p2.angle, p3.angle,p4.angle};
   89|     30|    
   90|    117|    for (double angle : angles) {
   91|    117|        if (!isEqual(angle, 90)) {
   92|      1|            return false;
   93|      1|        }
   94|    117|    }
   95|     30|    
   96|     30|    return true;
   97|     30|}
   98|       |
   99|      1|bool allSidesCongruent(Distances d) {
  100|      1|    double side = d.d12;
  101|      1|    
  102|      1|    if (!isEqual(side, d.d23))
  103|      1|    return false;
  104|      0|    
  105|      0|    /*
  106|      0|     REMOVED FOR CODE COVERAGE
  107|      0|     if (!isEqual(side, d.d34))
  108|      0|     return false;
  109|      0|     
  110|      0|     if (!isEqual(side, d.d41))
  111|      0|     return false;
  112|      0|     */
  113|      0|    return true;
  114|      0|}
  115|       |
  116|       |/*
  117|       | REMOVED FOR CODE COVERAGE
  118|       | Point diagonalMiddle(Point p1, Point p2) {
  119|       | double x_mid = (p1.x + p2.x)/2;
  120|       | double y_mid = (p1.y + p2.y)/2;
  121|       | Point bi_mid = {x_mid, y_mid};
  122|       | return bi_mid;
  123|       | }
  124|       | 
  125|       | bool isSupplementary(float a, float b){
  126|       | return (fabs(a + b - 180) < 0.00001);
  127|       | }
  128|       | */
  129|       |
  130|  3.32k|Distances getDistances(Point p1, Point p2, Point p3, Point p4) {
  131|  3.32k|    double d12 = distance(p1, p2);
  132|  3.32k|    double d23 = distance(p2, p3);
  133|  3.32k|    double d34 = distance(p3, p4);
  134|  3.32k|    double d41 = distance(p4, p1);
  135|  3.32k|    double d13 = distance(p1, p3);
  136|  3.32k|    double d24 = distance(p2, p4);
  137|  3.32k|    
  138|  3.32k|    Distances d = {d12, d23, d34, d41, d13, d24};
  139|  3.32k|    
  140|  3.32k|    return d;
  141|  3.32k|}
  142|       |
  143|  5.82k|double getAngle(Point p0, Point p1, Point p2) {
  144|  5.82k|    const double PI = 3.1415926535897;
  145|  5.82k|    p1.x = (p1.x - p0.x);
  146|  5.82k|    p1.y = (p1.y - p0.y);
  147|  5.82k|    p2.x = (p2.x - p0.x);
  148|  5.82k|    p2.y = (p2.y - p0.y);
  149|  5.82k|    double axb = (p1.x * p2.x) + (p1.y * p2.y);
  150|  5.82k|    double aMag = sqrt(pow(p1.x, 2) + pow(p1.y, 2));
  151|  5.82k|    double bMag = sqrt(pow(p2.x, 2) + pow(p2.y, 2));
  152|  5.82k|    double angleRad = acos(axb /(aMag * bMag));
  153|  5.82k|    double angleDeg = 180/PI * angleRad;
  154|  5.82k|    
  155|  5.82k|    return angleDeg;
  156|  5.82k|}
  157|       |
  158|  12.5k|double getSlope(Point p1, Point p2) {
  159|  12.5k|    double rise = p2.y - p1.y;
  160|  12.5k|    double run = p2.x - p1.x;
  161|  12.5k|    return rise/run;
  162|  12.5k|}
  163|       |
  164|    819|int getNumParallelSides(Point p1, Point p2, Point p3, Point p4) {
  165|    819|    int count = 0;
  166|    819|    double slope12 = getSlope(p1, p2);
  167|    819|    double slope23 = getSlope(p2, p3);
  168|    819|    double slope34 = getSlope(p3, p4);
  169|    819|    double slope41 = getSlope(p4, p1);
  170|    819|    
  171|    819|    if (isParallel(slope12, slope34))
  172|      0|    count++;
  173|    819|    
  174|    819|    if (isParallel(slope23, slope41))
  175|      0|    count++;
  176|    819|    
  177|    819|    return count;
  178|    819|}
  179|       |
  180|    819|int getNumCongruentSides(Distances d) {
  181|    819|    int counter = 0;
  182|    819|    
  183|    819|    if (isEqual(d.d12, d.d23) || isEqual(d.d12, d.d41))
  184|      0|    counter++;
  185|    819|    
  186|    819|    if (isEqual(d.d34, d.d23) || isEqual(d.d34, d.d41))
  187|      2|    counter++;
  188|    819|    
  189|    819|    return counter;
  190|    819|}
  191|       |
  192|  1.45k|void initiateAngles(Point &p1, Point &p2, Point &p3, Point &p4) {
  193|  1.45k|    p1.angle = getAngle(p1, p2, p4);
  194|  1.45k|    p2.angle = getAngle(p2, p1, p3);
  195|  1.45k|    p3.angle = getAngle(p3, p4, p2);
  196|  1.45k|    p4.angle = getAngle(p4, p1, p3);
  197|  1.45k|}
  198|       |
  199|       |
  200|       |
  201|       |////////////////////////////////////////////////////////////////////////////////////////////////////////////
  202|       |
  203|  3.32k|bool  isParallelogram(Point p1, Point p2, Point p3, Point p4) {
  204|  3.32k|    
  205|  3.32k|    
  206|  3.32k|    //opposite angles are congruent
  207|  3.32k|    if (!isEqual(p1.angle, p3.angle) || !isEqual(p2.angle, p4.angle)) {
  208|  3.27k|        return false;
  209|  3.27k|    }
  210|     47|    
  211|     47|    /*
  212|     47|     REMOVED FOR CODE COVERAGE
  213|     47|     //    Distances d = getDistances(p1, p2, p3, p4);
  214|     47|     
  215|     47|     //opposite sides are congruent
  216|     47|     if (!isEqual(d.d12, d.d34) || !isEqual(d.d23, d.d41)) {
  217|     47|     return false;
  218|     47|     }
  219|     47|     //adjacent angles are supplementary
  220|     47|     if (!isSupplementary(p1.angle, p2.angle) || !isSupplementary(p2.angle, p3.angle) ||
  221|     47|     !isSupplementary(p3.angle, p4.angle) || !isSupplementary(p4.angle, p1.angle))
  222|     47|     {
  223|     47|     return false;
  224|     47|     }
  225|     47|     
  226|     47|     // diagonals bisect each other
  227|     47|     Point diagonalMid13 = diagonalMiddle(p1, p3);
  228|     47|     Point diagonalMid24 = diagonalMiddle(p2, p4);
  229|     47|     if (!isEqual(diagonalMid13.x, diagonalMid24.x) || !isEqual(diagonalMid13.y, diagonalMid24.y)) {
  230|     47|     return false;
  231|     47|     }
  232|     47|     */
  233|     47|    return true;
  234|     47|}
  235|    849|bool isSquare(Point p1, Point p2, Point p3, Point p4) {
  236|    849|    Distances d = getDistances(p1, p2, p3, p4);
  237|    849|    
  238|    849|    // a square has all the properties of a parallelogram
  239|    849|    if (!isParallelogram(p1, p2, p3, p4)) {
  240|    819|        return false;
  241|    819|    }
  242|     30|    
  243|     30|    // and all angles must be 90 degrees
  244|     30|    if (!allAngles90(p1, p2, p3, p4)) {
  245|      1|        return false;
  246|      1|    }
  247|     29|    
  248|     29|    // and the diagonal length is equal
  249|     29|    if (!isEqual(d.d12, d.d41)) {
  250|     14|        return false;
  251|     14|    }
  252|     15|    
  253|     15|    return true;
  254|     15|}
  255|       |
  256|       |
  257|    834|bool isRectangle(Point p1, Point p2, Point p3, Point p4) {
  258|    834|    Distances d = getDistances(p1, p2, p3, p4);
  259|    834|    
  260|    834|    // Rectangles have all the properties of a parallelogram
  261|    834|    if (!isParallelogram(p1, p2, p3, p4)) {
  262|    819|        return false;
  263|    819|    }
  264|     15|    
  265|     15|    // and length of diagonals must equal
  266|     15|    if (!isEqual(d.d13, d.d24)) {
  267|      1|        return false;
  268|      1|    }
  269|     14|    
  270|     14|    return true;
  271|     14|}
  272|       |
  273|       |
  274|    820|bool isRhombi(Point p1, Point p2, Point p3, Point p4) {
  275|    820|    Distances d = getDistances(p1, p2, p3, p4);
  276|    820|    
  277|    820|    // Rhombus' have all the properties of a parallelogram
  278|    820|    if (!isParallelogram(p1, p2, p3, p4)) {
  279|    819|        return false;
  280|    819|    }
  281|      1|    
  282|      1|    // and all sides are congruent
  283|      1|    if (!allSidesCongruent(d)) {
  284|      1|        return false;
  285|      1|    }
  286|      0|    
  287|      0|    return true;
  288|      0|}
  289|       |
  290|    819|bool isTrapezoid(Point p1, Point p2, Point p3, Point p4) {
  291|    819|    int numParallelSides = getNumParallelSides(p1, p2, p3, p4);
  292|    819|    return (numParallelSides == 1);
  293|    819|}
  294|       |
  295|    819|bool isKite(Point p1, Point p2, Point p3, Point p4) {
  296|    819|    Distances d = getDistances(p1, p2, p3, p4);
  297|    819|    int numCongruentSides = getNumCongruentSides(d);
  298|    819|    return numCongruentSides == 2;
  299|    819|}
  300|       |
  301|       |////////////////////////////////////////////////////////////////////////////////////////////////////////////
  302|       |
  303|       |// checks for wrong # of points, points < 0 or > 100
  304|  1.50k|bool isError1(vector<string> line) {
  305|  1.50k|    if (line.size() != 6) {
  306|     28|        cout << "error 1";
  307|     28|        return true;
  308|     28|    }
  309|  1.47k|    
  310|  8.77k|    for (string ch : line) {
  311|  8.77k|        int num;
  312|  8.77k|        try {
  313|  8.77k|            num = stoi(ch);
  314|  8.77k|        } catch (const std::invalid_argument& ia) {
  315|      0|            cout << "error 1";
  316|      0|            return true;
  317|      0|        }
  318|  8.77k|        if (std::stoi(ch) > 100 || std::stoi(ch) < 0) {
  319|     14|            cout << "error 1";
  320|     14|            return true;
  321|     14|        }
  322|  8.77k|    }
  323|  1.47k|    
  324|  1.47k|    return false;
  325|  1.47k|}
  326|       |
  327|       |// checks for points that coincide
  328|  1.45k|bool isError2(vector<string> line) {
  329|  1.45k|    string p0 = "0 0";
  330|  1.45k|    string p1 = line[0] + " " + line[1];
  331|  1.45k|    string p2 = line[2] + " " + line[3];
  332|  1.45k|    string p3 = line[4] + " " + line[5];
  333|  1.45k|    
  334|  1.45k|    vector<string> points = {p0, p1, p2, p3};
  335|  1.45k|    
  336|  5.82k|    for (int i = 0; i < points.size() - 1; i++) {
  337|  13.1k|        for (int k = i + 1; k < points.size(); k++) {
  338|  8.74k|            if (points[i] == points[k]) {
  339|      2|                cout << "error 2";
  340|      2|                return true;
  341|      2|            }
  342|  8.74k|        }
  343|  4.37k|    }
  344|  1.45k|    
  345|  1.45k|    return false;
  346|  1.45k|}
  347|       |
  348|  1.45k|bool isError3(Point p1, Point p2, Point p3, Point p4) {
  349|  1.45k|    double slope12 = getSlope(p1, p2);
  350|  1.45k|    double slope23 = getSlope(p2, p3);
  351|  1.45k|    double slope34 = getSlope(p3, p4);
  352|  1.45k|    double slope41 = getSlope(p4, p1);
  353|  1.45k|    //    cout << "slope12 " << slope12 << endl;
  354|  1.45k|    //    cout << "slope23 " << slope23 << endl;
  355|  1.45k|    //    cout << "slope34 " << slope34 << endl;
  356|  1.45k|    //    cout << "slope41 " << slope41 << endl;
  357|  1.45k|    
  358|  1.45k|    // if opposing sides are parallel, there is no intersection
  359|  1.45k|    if (isParallel(slope12, slope34) && isParallel(slope23, slope41)) {
  360|      1|        return false;
  361|      1|    }
  362|  1.45k|    
  363|  1.45k|    // b = y - m(x), b is the y intercept
  364|  1.45k|    double b12 = p1.y - slope12 * (p1.x);
  365|  1.45k|    double b23 = p2.y - slope23 * (p2.x);
  366|  1.45k|    double b34 = p3.y - slope34 * (p3.x);
  367|  1.45k|    double b41 = p4.y - slope41 * (p4.x);
  368|  1.45k|    
  369|  1.45k|    // x and y intercept for lines 12 and 34
  370|  1.45k|    double x1234 = (b12 - b34)/ (slope34 - slope12);
  371|  1.45k|    double y1234 = (slope12 * x1234) + b12;
  372|  1.45k|//    cout << "x1234 " << x1234 << " y1234 " << y1234 << endl;
  373|  1.45k|    
  374|  1.45k|    // x and y intercept for lines 23 and 41
  375|  1.45k|    double x2341 = (b23 - (b41))/ (slope41 - (slope23));
  376|  1.45k|    double y2341 = (slope23 * x2341) + b23;
  377|  1.45k|    //        cout << "x2341 " << x2341 << " y2341 " << x2341 << endl;
  378|  1.45k|    
  379|  1.45k|    // check that the intercepts is within the range of line 12
  380|  1.45k|    bool bool1 = x1234 > min(p1.x, p2.x) || isEqual(x1234, min(p1.x, p2.x));
  381|  1.45k|    bool bool2 = x1234 < max(p1.x, p2.x) || isEqual(x1234, max(p1.x, p2.x));
  382|  1.45k|    bool bool3 = y1234 > min(p1.y, p2.y) || isEqual(y1234, min(p1.y, p2.y));
  383|  1.45k|    bool bool4 = y1234 < max(p1.y, p2.y) || isEqual(y1234, max(p1.y, p2.y));
  384|  1.45k|    
  385|  1.45k|    // check that the intercepts is within the range of line 34
  386|  1.45k|    bool bool5 = x1234 > min(p3.x, p4.x) || isEqual(x1234, min(p3.x, p4.x));
  387|  1.45k|    bool bool6 = x1234 < max(p3.x, p4.x) || isEqual(x1234, max(p3.x, p4.x));
  388|  1.45k|    bool bool7 = y1234 > min(p3.y, p4.y) || isEqual(y1234, min(p3.y, p4.y));
  389|  1.45k|    bool bool8 = y1234 < max(p3.y, p4.y) || isEqual(y1234, max(p3.y, p4.y));
  390|  1.45k|    
  391|  1.45k|    // check that the intercepts is within the range of line 41
  392|  1.45k|    bool bool9 = x2341 > min(p4.x, p1.x) || isEqual(x2341, min(p4.x, p1.x));
  393|  1.45k|    bool bool10 = x2341 < max(p4.x, p1.x) || isEqual(x2341, max(p4.x, p1.x));
  394|  1.45k|    bool bool11 = y2341 > min(p4.y, p1.y) || isEqual(y2341, min(p4.y, p1.y));
  395|  1.45k|    bool bool12 = y2341 < max(p4.y, p1.y) || isEqual(y2341, max(p4.y, p1.y));
  396|  1.45k|    
  397|  1.45k|    // check that the intercepts is within the range of line 23
  398|  1.45k|    bool bool13 = x2341 >= min(p2.x, p3.x) || isEqual(x2341, min(p2.x, p3.x));
  399|  1.45k|    bool bool14 = x2341 <= max(p2.x, p3.x) || isEqual(x2341, max(p2.x, p3.x));
  400|  1.45k|    bool bool15 = y2341 >= min(p2.y, p3.y) || isEqual(y2341, min(p2.y, p3.y));
  401|  1.45k|    bool bool16 = y2341 <= max(p2.y, p3.y) || isEqual(y2341, max(p2.y, p3.y));
  402|  1.45k|    
  403|  1.45k|//    cout << bool1 << " " << bool2 << " " << bool3 << " " << bool4 << " " << bool5 << " " << bool6 << " " << bool7 << " " << bool8 << endl;
  404|  1.45k|    //    cout << bool9 << " " << bool10 << " " << bool11 << " " << bool12 << " " << bool13 << " " << bool14 << " " << bool15 << " " << bool16 << endl;
  405|  1.45k|    
  406|  1.45k|    if (fabs(x1234) != INFINITY && fabs(y1234) != INFINITY && x1234 != NAN && y1234 != NAN) {
  407|  1.42k|        if (bool1 && bool2 && bool3 && bool4 && bool5 && bool6 && bool7 && bool8) {
  408|    305|            cout << "error 3";
  409|    305|            return true;
  410|    305|        }
  411|  1.15k|    }
  412|  1.15k|    
  413|  1.15k|    if (fabs(x2341) != INFINITY && fabs(y2341) != INFINITY && x1234 != NAN && y1234 != NAN) {
  414|  1.15k|        if (bool9 && bool10 && bool11 && bool12 && bool13 && bool14 && bool15 && bool16) {
  415|    301|            cout << "error 3";
  416|    301|            return true;
  417|    301|        }
  418|    849|    }
  419|    849|    
  420|    849|    return false;
  421|    849|}
  422|       |
  423|       |// any 3 points are colinear
  424|    850|bool isError4(Point p1, Point p2, Point p3, Point p4) {
  425|    850|    double slope12 = getSlope(p1, p2);
  426|    850|    double slope23 = getSlope(p2, p3);
  427|    850|    double slope34 = getSlope(p3, p4);
  428|    850|    double slope41 = getSlope(p4, p1);
  429|    850|    
  430|    850|    if (isEqual(slope12, slope23) || isEqual(slope23, slope34) || isEqual(slope34, slope41)) {
  431|      1|        cout << "error 4";
  432|      1|        return true;
  433|      1|    }
  434|    849|    
  435|    849|    return false;
  436|    849|}
  437|       |
  438|       |
  439|       |
  440|       |////////////////////////////////////////////////////////////////////////////////////////////////////////////
  441|       |
  442|  1.50k|int main(int argc, const char * argv[]) {
  443|  1.50k|    string in;
  444|  1.50k|    //        in = "0 4 2 4 2 2    "; //fine
  445|  1.50k|    //    in = "3 0 0 3 3 3"; // error
  446|  1.50k|    //    in = "0 3 3 0 3 3"; // error 3
  447|  1.50k|    //    in = "4 0 0 4 1 1"; // fine
  448|  1.50k|    //    in = "4 3 2 3 1 2"; // fine
  449|  1.50k|    //    in = "2 1 -2 1 3 -2"; // error 1
  450|  1.50k|    //    in = "5 3 4 0 0 3"; // error 3
  451|  1.50k|    //    in = "1 2 1 4 1 9"; // error 4
  452|  1.50k|    //    in = "25 25 9 2 25 25"; // error 2
  453|  1.50k|    //    in = "84 88 47 47 88 84"; // kite
  454|  1.50k|//    in = "69 53 17 52 81 52";
  455|  2.34k|        while (!cin.eof()) {
  456|  1.50k|            getline(cin, in);
  457|  1.50k|        vector<string> splittedLine = splitLine(in);
  458|  1.50k|        if (isError1(splittedLine))
  459|     42|        return 1;
  460|  1.45k|        
  461|  1.45k|        if (isError2(splittedLine))
  462|      2|        return 1;
  463|  1.45k|        
  464|  1.45k|        Point p1 = {0, 0};
  465|  1.45k|        Point p2 = {stod(splittedLine[0]), stod(splittedLine[1])};
  466|  1.45k|        Point p3 = {stod(splittedLine[2]), stod(splittedLine[3])};
  467|  1.45k|        Point p4 = {stod(splittedLine[4]), stod(splittedLine[5])};
  468|  1.45k|        
  469|  1.45k|        initiateAngles(p1, p2, p3, p4);
  470|  1.45k|        
  471|  1.45k|        if (isError3(p1, p2, p3 ,p4))
  472|    606|        return 1;
  473|    850|        if (isError4(p1, p2, p3 ,p4))
  474|      1|        return 1;
  475|    849|        
  476|    849|        assert(splittedLine.size() == 6);
  477|    849|        
  478|  5.09k|        for (string num : splittedLine) {
  479|  5.09k|            assert(stod(num) >= 0 && stod(num) <= 100);
  480|  5.09k|        }
  481|    849|        
  482|    849|        assert(int(p1.angle + p2.angle + p3.angle + p4.angle) <= 360);
  483|    849|        
  484|    849|        
  485|    849|        if (isSquare(p1, p2, p3, p4)) {
  486|     15|            cout << "square";
  487|    834|        } else if (isRectangle(p1, p2, p3, p4)) {
  488|     14|            cout << "rectangle";
  489|    820|        } else if (isRhombi(p1, p2, p3, p4)) {
  490|      0|            cout << "rhombus";
  491|    820|        } else if (isParallelogram(p1, p2, p3, p4)) {
  492|      1|            cout << "parallelogram";
  493|    819|        } else if (isTrapezoid(p1, p2, p3, p4)) {
  494|      0|            cout << "trapezoid";
  495|    819|        } else if (isKite(p1, p2, p3, p4)) {
  496|      0|            cout << "kite";
  497|    819|        } else {
  498|    819|            cout << "quadrilateral";
  499|    819|        }
  500|    849|    }
  501|  1.50k|    
  502|  1.50k|    return 0;
  503|  1.50k|}

